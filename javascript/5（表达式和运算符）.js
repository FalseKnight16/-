//隐式类型转换
3 * '4';		// 12
true + true;	// 2
false + 2;		// 2
3 * '2天'; 	   // NaN
"z" * "j";	    // NaN
3 + '2天'; 	   // '32天'
3 + null;		// 0,3+null=0
3 * '';			// 0
3 * ' ';		// 0
3 + '';			// '3'
3 + ' ';		// '3 '
//隐式转换的本质是 JS 内部自动调用 Number() 函数








//在进行小数运算时，要调用数字的 `toFixed()` 方法保留指定的小数位数。在 JS 中，有些小数的数学运算不是很精准。0.1 + 0.2;	// 0.30000000000000004
(0.1 + 0.2).toFixed(2);				// '0.30'，默认得到一个字符串值
Number((0.1 + 0.2).toFixed(2));		 // 0.3
//`toFixed()` 遵循 “四舍五入” 原则。
//要比较两个浮点数是否相等，只能计算它们之差的绝对值，看是否小于某个阈值：
Math.abs(1 / 3 - (1 - 2 / 3)) < 0.0000001; // true
//还有一种解决技巧，就是将浮点数转换为整数进行计算：
0.1 + 0.2;	// 0.30000000000000004
(0.1 * 10 + 0.2 * 10) / 10;	// 0.3
//Math.abs()作用 : 返回一个数的绝对值



//JS 中没有提供幂运算、开根号的运算符，需要使用 Math 对象的相关方法进行计算。
/*
`Math.pow(a, b)`：求 a 的 b 次方。
`Math.sqrt(a)`：求 a 的平方根。
*/
Math.pow(2, 3);		// 8
Math.pow(3, 2);		// 9
Math.sqrt(81);		// 9
Math.sqrt(-81);		// NaN









/*
`Math.ceil()`：向上取整。
`Math.floor()`：向下取整。
`Math.round()`：把一个数字舍入为最接近的整数（“四舍六入”，“五不一定”）
*/
Math.ceil(2.4);			// 3
Math.floor(2.4);		// 2

Math.ceil(-2.4);		// -2
Math.floor(-2.4);		// -3

Math.ceil(2);			// 2
Math.floor(2);			// 2		

//NaN不自等

//优先级：`!` > `&&` > `||`

/*
`a++`：先用再加；`++a`：先加再用。
`a--`：先用再减；`--a`：先减再用。
*/


//非运算 > 数学运算 > 关系运算 > 逻辑运算